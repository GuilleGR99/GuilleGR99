pacman::p_load(shiny,shinydashboard,shinythemes,httr,tidyverse,jsonlite,janitor,leaflet,leaflet.extras,pacman)
##CARGA PUNTO GUARDADO 1####
df_gas <- read_rds('df_gas.xlsx')
df_gas <- as.data.frame(df_gas)
#SHINY APP####
ui <- bootstrapPage(
titlePanel('Gas Espania'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("df_gas_map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("price_range", "precio_gasoleo_a",
min(df_gas$precio_gasoleo_a, na.rm = TRUE),
max(df_gas$precio_gasoleo_a, na.rm = TRUE),
value = range(df_gas$precio_gasoleo_a, na.rm = TRUE),
step = 0.1
)
)
)
server <- function(input, output) {
output$df_gas_map <- renderLeaflet({
df_gas %>%
filter(municipio=='Madrid') %>%
leaflet() %>%
addProviderTiles('Esri') %>%
addMarkers(~longitud,~latitud)
filteredData <- reactive({
df_gas[df_gas$precio_gasoleo_a >= input$price_range[1] & df_gas$precio_gasoleo_a <= input$price_range[2]]
})
observe({
leafletProxy("df_gas_map", data = filteredData()) %>%
clearShapes() %>%
addMarkers()
})
})
}
shinyApp(ui,server)
pacman::p_load(shiny,shinydashboard,shinythemes,httr,tidyverse,jsonlite,janitor,leaflet,leaflet.extras,pacman)
##CARGA PUNTO GUARDADO 1####
df_gas <- read_rds('df_gas.xlsx')
setwd("C:/Users/G/OneDrive/Documentos/R/lenguaje_prograrmacion_estadistica/actividad_final_prueba")
setwd("C:/Users/G/OneDrive/Documentos/R/lenguaje_prograrmacion_estadistica")
shiny::runApp('actividad_final_prueba_prueba')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('actividad_final_prueba_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
shiny::runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
shiny::runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
runApp()
runApp('actividad_final_prueba')
runApp('actividad_final_prueba')
setwd("C:/Users/G/OneDrive/Documentos/R/lenguaje_prograrmacion_estadistica/actividad_final_prueba")
runApp()
setwd("C:/Users/G/OneDrive/Documentos/R/lenguaje_prograrmacion_estadistica/actividad_final_prueba")
runApp()
runApp()
runApp()
runApp()
##CARGA PUNTO GUARDADO 1####
df_gas <- read_rds('df_gas_v2.xlsx')
runApp()
